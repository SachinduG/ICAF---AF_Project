var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require("react");
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _axios = require("axios");
  var _axiosDefault = _parcelHelpers.interopDefault(_axios);
  var _sweetalert = require("sweetalert2");
  var _sweetalertDefault = _parcelHelpers.interopDefault(_sweetalert);
  var _jsxFileName = "D:\\AF-ICAF\\Adminside\\components\\clients\\PresenterEditor.jsx", _s = $RefreshSig$();
  function PresenterEditor({getPresenters, setPresenterEditorOpen, editPresenterData}) {
    _s();
    const [editFName, setEditFName] = _react.useState("");
    const [editLName, setEditLName] = _react.useState("");
    const [editEmail, setEditEmail] = _react.useState("");
    const [editMobile, setEditMobile] = _react.useState("");
    const mountedRef = _react.useRef(false);
    // effect just for tracking mounted state
    _react.useEffect(() => {
      mountedRef.current = true;
      console.log('render!');
      return () => {
        mountedRef.current = false;
        console.log('unmounting...');
      };
    }, []);
    _react.useEffect(() => {
      if (editPresenterData) {
        setEditFName(editPresenterData.fname ? editPresenterData.fname : "");
        setEditLName(editPresenterData.lname ? editPresenterData.lname : "");
        setEditEmail(editPresenterData.email ? editPresenterData.email : "");
        setEditMobile(editPresenterData.mobile ? editPresenterData.mobile : "");
      }
    }, [editPresenterData]);
    async function savePresenter(e) {
      e.preventDefault();
      const presenterData = {
        fname: editFName ? editFName : undefined,
        lname: editLName ? editLName : undefined,
        email: editEmail ? editEmail : undefined,
        mobile: editMobile ? editMobile : undefined
      };
      try {
        if (!editPresenterData) await _axiosDefault.default.post(`http://localhost:5000/presenter/`, presenterData); else await _axiosDefault.default.put(`http://localhost:5000/presenter/${editPresenterData._id}`, presenterData);
        await _sweetalertDefault.default.fire({
          position: 'center',
          icon: 'success',
          title: 'You successfully updated presenter!',
          showConfirmButton: false,
          timer: 1500
        });
      } catch (err) {
        if (editFName.length < 3) {
          await _sweetalertDefault.default.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'First Name must be at least 3 characters!'
          });
        }
        if (editLName.length < 3) {
          await _sweetalertDefault.default.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Last Name must be at least 3 characters!'
          });
        }
        if (editMobile.length < 10) {
          await _sweetalertDefault.default.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Mobile Number must be at least 10 characters!'
          });
        }
      }
      getPresenters();
      closeEditor();
    }
    function closeEditor() {
      setPresenterEditorOpen(false);
      setEditFName("");
      setEditLName("");
      setEditEmail("");
      setEditMobile("");
    }
    return (
      /*#__PURE__*/_reactDefault.default.createElement("div", {
        style: {
          marginTop: 20
        },
        className: "user-editor",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88,
          columnNumber: 9
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("h3", {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89,
          columnNumber: 13
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("center", {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89,
          columnNumber: 17
        }
      }, "Update Presenter")), /*#__PURE__*/_reactDefault.default.createElement("div", {
        className: "container",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 90,
          columnNumber: 13
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("form", {
        onSubmit: savePresenter,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 91,
          columnNumber: 13
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("div", {
        className: "form-group",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 92,
          columnNumber: 17
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("label", {
        htmlFor: "editor-1",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 93,
          columnNumber: 17
        }
      }, "First Name"), /*#__PURE__*/_reactDefault.default.createElement("input", {
        id: "editor-1",
        className: "form-control",
        type: "text",
        value: editFName,
        onChange: e => setEditFName(e.target.value),
        required: true,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 94,
          columnNumber: 17
        }
      })), /*#__PURE__*/_reactDefault.default.createElement("div", {
        className: "form-group",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 104,
          columnNumber: 17
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("label", {
        htmlFor: "editor-2",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 105,
          columnNumber: 17
        }
      }, "Last Name"), /*#__PURE__*/_reactDefault.default.createElement("input", {
        id: "editor-2",
        className: "form-control",
        type: "text",
        value: editLName,
        onChange: e => setEditLName(e.target.value),
        required: true,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 106,
          columnNumber: 17
        }
      })), /*#__PURE__*/_reactDefault.default.createElement("div", {
        className: "form-group",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 116,
          columnNumber: 17
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("label", {
        htmlFor: "editor-3",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 117,
          columnNumber: 17
        }
      }, "Email Address"), /*#__PURE__*/_reactDefault.default.createElement("input", {
        id: "editor-3",
        className: "form-control",
        type: "email",
        value: editEmail,
        onChange: e => setEditEmail(e.target.value),
        required: true,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 118,
          columnNumber: 17
        }
      })), /*#__PURE__*/_reactDefault.default.createElement("div", {
        className: "form-group",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 128,
          columnNumber: 17
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("label", {
        htmlFor: "editor-4",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 129,
          columnNumber: 17
        }
      }, "Mobile Number"), /*#__PURE__*/_reactDefault.default.createElement("input", {
        id: "editor-4",
        className: "form-control",
        type: "text",
        value: editMobile,
        onChange: e => setEditMobile(e.target.value),
        required: true,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 130,
          columnNumber: 17
        }
      })), /*#__PURE__*/_reactDefault.default.createElement("div", {
        className: "form-group",
        style: {
          marginLeft: 475,
          marginTop: 30
        },
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 140,
          columnNumber: 17
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("button", {
        className: "btn btn-outline-success",
        type: "submit",
        style: {
          marginRight: 10
        },
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 141,
          columnNumber: 17
        }
      }, "Save"), /*#__PURE__*/_reactDefault.default.createElement("button", {
        className: "btn btn-outline-warning",
        type: "button",
        onClick: closeEditor,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 142,
          columnNumber: 21
        }
      }, "Cancel")))))
    );
  }
  _s(PresenterEditor, "LhUOACnIVbwSDHZSZMiozPMhI6w=");
  _c = PresenterEditor;
  exports.default = PresenterEditor;
  var _c;
  $RefreshReg$(_c, "PresenterEditor");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
