var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  require('../styles/Progress.css');
  var _jsxFileName = "D:\\AF-ICAF\\Adminside\\components\\home\\Progress.js";
  class Progress extends _react.Component {
    render() {
      let value = this.props.value;
      // Limit value to min and max bounds
      if (value < this.props.min) {
        value = 0;
      } else if (value > this.props.max) {
        value = this.props.max;
      }
      // Adjust progress bar using inline styles
      let innerWidthStyle = {
        width: `${value / this.props.max * 100}%`
      };
      return (
        /*#__PURE__*/_reactDefault.default.createElement("div", {
          className: "Progress",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 21,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement("div", {
          className: "inner",
          style: innerWidthStyle,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 22,
            columnNumber: 17
          }
        }))
      );
    }
  }
  // Provide a default value when one isn't supplied
  Progress.defaultProps = {
    value: 0
  };
  // Enforce the type of props to send to this component
  Progress.propTypes = {
    min: _reactDefault.default.PropTypes.number.isRequired,
    max: _reactDefault.default.PropTypes.number.isRequired,
    value: _reactDefault.default.PropTypes.number.isRequired
  };
  exports.default = Progress;
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
